(function () {
	/**
	 * Creates library for working with Order
	 * Middleware layer between Sezzle API and Demandware orders
	 *
	 * @constructor
	 * @this {Order}
	 * @returns Order instance
	 */
	var Order = function () {
		var logger = require('dw/system').Logger.getLogger('Sezzle', ''),
			OrderMgr = require('dw/order/OrderMgr'),
			Order = require('dw/order/Order'),
			Money = require('dw/value/Money'),
			File = require('dw/io/File'),
			FileReader = require('dw/io/FileReader'),
			FileWriter = require('dw/io/FileWriter'),
			data = require('~/cartridge/scripts/data/sezzleData.ds'),
			basket = require('~/cartridge/scripts/basket/sezzleBasket.ds'),
			api = require('~/cartridge/scripts/api/sezzleAPI.ds'),
			filepath = File.IMPEX + File.SEPARATOR + 'sezzle' + File.SEPARATOR,
			filename = 'sezzle.dat';
			
		function readDateFromFile(){
			var file = new File(filepath + filename);
			if (file.exists()){
				var fileReader = new FileReader(file);
				var strDate = fileReader.readLine();
				if (strDate){
					return new Date(Date.parse(strDate));
				}
			}
			return new Date(0);
		}
		
		function saveDateToFile(date){
			var dir = new File(filepath);
			if (!dir.exists()){
				dir.mkdirs();
			}
			var file = new File(filepath + filename);
			if (!file.exists()){
				file.createNewFile();
			}
			var fileWriter = new FileWriter(file);
			fileWriter.writeLine(date.toISOString());
			fileWriter.flush();
			fileWriter.close();
		}
			
		/**
		 * Updates PaymentInstrument and Order system objects
		 * 
		 * @param {dw.order.Order} Order demnadware order instance
		 * @param {Object} Reponse auth response from Sezzle
		 * @param {dw.order.PaymentProcessor} PaymentProcessor payment processor instance
		 * @param {dw.order.PaymentInstrument} PaymentInstrument payment isntrument instance
		 */
		this.updateAttributes = function (order, reponse, paymentProcessor, paymentInstrument) {
			
			try {
				paymentInstrument.paymentTransaction.transactionID = reponse.events[0].id;
				paymentInstrument.paymentTransaction.amount = new Money(reponse.amount, order.currencyCode).divide(100);
				paymentInstrument.paymentTransaction.setPaymentProcessor(paymentProcessor);
				
				order.custom.SezzleToken = reponse.events[0].id;
				order.custom.SezzleExternalId = reponse.id;
				order.custom.SezzleStatus = 'AUTH';
				order.custom.SezzlePaymentAction = data.getSezzlePaymentAction();
			} catch (e) {
				logger.error('Sezzle. File - sezzleOrder.ds. Error - {0}', e);
			}
		};
		
		this.authOrder = api.auth;
		
		this.voidOrder = api.void;
		
		this.captureOrder = api.capture;
		
		/**
		 * Capture new orders and update their afirm status. Used in Sezzle job.
		 * 
		 * @see pipeline "SezzleJob"
		 */
		this.captureOrders = function () {
			OrderMgr.processOrders(function (order) {
				try {
					api.capture(order.custom.SezzleExternalId);
					order.custom.SezzleStatus = 'CAPTURE';
					order.setPaymentStatus(Order.PAYMENT_STATUS_PAID);
					order.setStatus(Order.ORDER_STATUS_COMPLETED);
				} catch (e) {
					logger.error('Sezzle. File - sezzleOrder.ds. Error - {0}', e);
				}
			}, '(status = {0} OR status = {1}) AND custom.SezzlePaymentAction = {2} AND custom.SezzleStatus = {3}', Order.ORDER_STATUS_NEW, Order.ORDER_STATUS_OPEN, 'AUTH', 'AUTH');
		};
		
		/**
		 * Void cancelled orders and update their afirm status. Used in Sezzle job.
		 * 
		 * @see pipeline "SezzleJob"
		 */
		this.voidOrders = function () {
			OrderMgr.processOrders(function (order) {
				try {
					api.void(order.custom.SezzleExternalId);
					order.custom.SezzleStatus = 'VOIDED';
				} catch (e) {
					logger.error('Sezzle. File - sezzleOrder.ds. Error - {0}', e);
				}
			}, 'status = {0} AND custom.SezzleStatus = {1}', Order.ORDER_STATUS_CANCELLED, 'AUTH');
		};
		
		/**
		 * Refund captured orders and update their afirm status. Used in Sezzle job.
		 * 
		 * @see pipeline "SezzleJob"
		 */
		this.refundOrders = function () {
			OrderMgr.processOrders(function (order) {
				try {
					api.refund(order.custom.SezzleExternalId);
					order.custom.SezzleStatus = 'REFUNDED';
				} catch (e) {
					logger.error('Sezzle. File - sezzleOrder.ds. Error - {0}', e);
				}
			}, 'status = {0} AND custom.SezzleStatus = {1}', Order.ORDER_STATUS_CANCELLED, 'CAPTURE');
		};
		
		/**
		 * Update orders on Sezzle side. Used in Sezzle job.
		 * 
		 * @see pipeline "SezzleJob"
		 */
		this.updateOrders = function () {
			var lastUpdateDateTime = readDateFromFile();
			var startDate = new Date();
			OrderMgr.processOrders(function (order) {
				try {
					var orderShipment = order.getDefaultShipment();
					var shippingAddress = orderShipment.shippingAddress;
					var updateObject = {
							"order_id": order.orderNo,
							"shipping": basket.getShippingAddress(order)
						};
					if (orderShipment.shippingMethod && orderShipment.shippingMethod.displayName){
						updateObject.shipping_carrier = orderShipment.shippingMethod.displayName;
					}
					if (orderShipment.trackingNumber){
						updateObject.shipping_confirmation = orderShipment.trackingNumber;
					}
					api.update(order.custom.SezzleExternalId, updateObject);
				} catch (e) {
					logger.error('Sezzle. File - sezzleOrder.ds. Error - {0}', e);
				}
			}, 'custom.SezzleStatus != NULL AND lastModified > {0}', lastUpdateDateTime.toISOString());
			saveDateToFile(startDate);
		};
	};
	
	module.exports = new Order();
}());