(function () {
	/**
	 * Creates library for working with Order
	 * Middleware layer between Sezzle API and orders
	 *
	 * @constructor
	 * @this {Order}
	 * @returns Order instance
	 */
	var Order = function () {
		var logger = require('dw/system').Logger.getLogger('Sezzle', ''),
			OrderMgr = require('dw/order/OrderMgr'),
			Order = require('dw/order/Order'),
			Money = require('dw/value/Money'),
			File = require('dw/io/File'),
			FileReader = require('dw/io/FileReader'),
			FileWriter = require('dw/io/FileWriter'),
			data = require('~/cartridge/scripts/data/sezzleData.ds'),
			basket = require('~/cartridge/scripts/basket/sezzleBasket.ds'),
			api = require('~/cartridge/scripts/api/sezzleAPI.ds'),
			filepath = File.IMPEX + File.SEPARATOR + 'sezzle' + File.SEPARATOR,
			filename = 'sezzle.dat';
			
		function readDateFromFile(){
			var file = new File(filepath + filename);
			if (file.exists()){
				var fileReader = new FileReader(file);
				var strDate = fileReader.readLine();
				fileReader.close()
				if (strDate){
					return new Date(Date.parse(strDate));
				}
			}
			return new Date(0);
		}
		
		function saveDateToFile(date){
			var dir = new File(filepath);
			if (!dir.exists()){
				dir.mkdirs();
			}
			var file = new File(filepath + filename);
			if (!file.exists()){
				file.createNewFile();
			}
			var fileWriter = new FileWriter(file);
			fileWriter.writeLine(date.toISOString());
			fileWriter.flush();
			fileWriter.close();
		}
			
		/**
		 * Updates PaymentInstrument and Order system objects
		 * 
		 * @param {dw.order.Order} Order demnadware order instance
		 * @param {Object} Reponse auth response from Sezzle
		 * @param {dw.order.PaymentProcessor} PaymentProcessor payment processor instance
		 * @param {dw.order.PaymentInstrument} PaymentInstrument payment isntrument instance
		 */
		this.updateAttributes = function (order, response, paymentProcessor, paymentInstrument) {
			
			try {
				order.custom.SezzleToken = response.token;
				order.custom.SezzleExternalId = response.reference_id;
				order.custom.SezzlePaymentAction = String(data.getSezzlePaymentAction());
				order.custom.SezzleOrderUUID = response.order_uuid != 'undefined' ? response.order_uuid : '';
				order.custom.SezzleAuthUUID = response.auth_uuid != 'undefined' ? response.auth_uuid : '';
				order.custom.SezzleOrderAmount = new Money(response.amount, order.currencyCode).divide(100);
			} catch (e) {
				logger.debug('Sezzle. File - sezzleOrder.ds. Error - {0}', e);
			}
		};
		
		
		this.captureOrder = function (order) {
			try {
				var captureAmount = order.totalGrossPrice.multiply(100).getValue();
				response = api.capture(order, captureAmount, false);
			} catch (e) {
				logger.debug('Sezzle. File - sezzleOrder.ds. Error - {0}', e);
			}
		};
		/**
		 * Refund captured orders and update their sezzle  status. Used in Sezzle job.
		 * 
		 * @see pipeline "SezzleJob"
		 */
		this.refundOrders = function () {
			OrderMgr.processOrders(function (order) {
				try {
					var refundAmount = order.totalGrossPrice.multiply(100).getValue();
					response = api.refund(order, refundAmount);
				} catch (e) {
					logger.debug('Sezzle. File - sezzleOrder.ds. Error - {0}', e);
				}
			}, 'status = {0} AND custom.SezzleStatus = {1}', Order.ORDER_STATUS_CANCELLED, 'CAPTURE');
		};
	};
	
	module.exports = new Order();
}());