(function () {
	/**
	 * Creates library for working with Basket
	 *
	 * @constructor
	 * @this {Basket}
	 * @returns Basket instance
	 */
	var Basket = function () {
		var self = this,
			web = require('dw/web'),
			system = require('dw/system'),
			PaymentMgr = require('dw/order/PaymentMgr'),
			ProductMgr = require('dw/catalog/ProductMgr'),
			sezzleUtils = require('*/cartridge/scripts/utils/sezzleUtils.ds'),
			sezzleData = require('*/cartridge/scripts/data/sezzleData.ds'),
			logger = require('dw/system').Logger.getLogger('Sezzle', ''),
			sezzleAPI = require('*/cartridge/scripts/api/sezzleAPI.ds'),
			sezzleOrder = require('*/cartridge/scripts/order/sezzleOrder.ds'),
			Transaction = require('dw/system/Transaction');

		self.utils = sezzleUtils;

		/**
		 * Build shipping address object based on Basket
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {Object} simple object with name and shipping address
		 */
		self.getShippingAddress = function (basket) {
			var basketShippingAddress = basket.getDefaultShipment().getShippingAddress(),
				shippingAddress = {
					'name' : basketShippingAddress.getFullName(),
					'street' : basketShippingAddress.getAddress1(),
					'street2' : basketShippingAddress.getAddress2(),
					'city' : basketShippingAddress.getCity(),
					'state' : basketShippingAddress.getStateCode(),
					'postal_code' : basketShippingAddress.getPostalCode(),
					'country_code' : basketShippingAddress.getCountryCode().getValue(),
					'phone' : basketShippingAddress.getPhone()	
				};

			return shippingAddress;
		};

		/**
		 * Build billing address object based on Basket
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {Object} simple object with name and billing address
		 */
		self.getBillingAddress = function (basket) {
			var basketBillingAddress = basket.getBillingAddress();
			if (empty(basketBillingAddress)){
				return null;
			}
			var billingAddress = {
					'name' : basketBillingAddress.getFullName(),
					'street' : basketBillingAddress.getAddress1(),
					'street2' : basketBillingAddress.getAddress2(),
					'city' : basketBillingAddress.getCity(),
					'state' : basketBillingAddress.getStateCode(),
					'postal_code' : basketBillingAddress.getPostalCode(),
					'country_code' : basketBillingAddress.getCountryCode().getValue(),
					'phone' : basketBillingAddress.getPhone()	
				};

			return billingAddress;
		};

		/**
		 * Build items object based on Basket
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {Object} simple object contained product data
		 */
		self.getItems = function (basket) {
			var items = [],
				productLineItems = basket.getProductLineItems().iterator();

			while (!empty(productLineItems) && productLineItems.hasNext()) {
				let productLineItem = productLineItems.next();
				
				var item_price = productLineItem.optionProductLineItem ?
									productLineItem.getBasePrice().multiply(100).getValue() :
									productLineItem.product.getPriceModel().getPrice().multiply(100).getValue();
				items.push({
					'name' : productLineItem.getProductName(),
					'sku' : productLineItem.getProductID(),
					'price' : {'amount_in_cents' : item_price, 'currency' :basket.getCurrencyCode()},
					'quantity' : productLineItem.getQuantityValue()
				});
				
			}

			return items;
		};

		/**
		 * Checks possibility of using Sezzle payment method
		 * Removes one if it cann't be accepted
		 *
		 * @param {dw.order.Basket}  basket
		 * @param {dw.util.Collection} ApplicablePaymentMethods basket
		 * @returns {Object} simple object contained product data
		 */
		self.validatePayments = function (basket, ApplicablePaymentMethods) {
			if (!basket.getGiftCertificateLineItems().empty || !sezzleData.getSezzleOnlineStatus() || !sezzleUtils.checkBasketTotalRange('object' in basket ? basket.object : basket)) {
				let sezzlePaymentMethod = PaymentMgr.getPaymentMethod('Sezzle');

				ApplicablePaymentMethods.remove(sezzlePaymentMethod);
			}

			return ApplicablePaymentMethods;
		};

		/**
		 * Build object with confirmation and cancel URLs
		 *
		 * @returns {Object} simple object contained URLs
		 */
		self.getMerchant = function () {
			var merchant = {
				'user_confirmation_url' : web.URLUtils.https('Sezzle-Success').toString(),
				'user_cancel_url' : web.URLUtils.https('Checkout-Begin').toString(),
				'user_confirmation_url_action' : 'GET'
			};

			return merchant;
		};

		/**
		 * Build object with configuration data
		 *
		 * @returns {Object} simple object contained configuration data
		 */
		self.getConfig = function () {
			var config = {};

			return config;
		};

		self.getDiscounts = function (basket) {
			var discount = {
				
			};

			return [];
		};

		/**
		 * Build object with metadata
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {Object} simple object contained metadata
		 */
		self.getMetadata = function (basket) {
			var compatibilityMode = (system.System.compatibilityMode / 100).toString();
			compatibilityMode = compatibilityMode.split('.').map(function(val, i){
				if(i != 1) {
					return val;
				}
				return val.replace("0", "");
			}).join('.');
			var metadata = {
				'shipping_type' : basket.getDefaultShipment().getShippingMethod().getDisplayName(),
				'platform_version': compatibilityMode,
				'platform_type': web.Resource.msg('metadata.platform_type', 'sezzle', null),
				'platform_sezzle': web.Resource.msg('metadata.platform_sezzle', 'sezzle', null),
			};

			return metadata;
		};

		/**
		 * Return shipping amount in cents
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {Number} shipping amount in cents
		 */
		self.getShippingAmmout = function (basket) {
			var shippingAmount = basket.getDefaultShipment().getShippingTotalPrice().multiply(100).getValue();

			return shippingAmount;
		};

		/**
		 * Return tax amount in cents
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {Number} tax amount in cents
		 */
		self.getTaxAmount = function (basket) {
			var taxAmount = basket.getTotalTax().multiply(100).getValue();

			return taxAmount;
		};

		/**
		 * Return total amount in cents
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {Number} total amount in cents
		 */
		self.getTotal = function (basket) {
			var total = sezzleUtils.calculateNonGiftCertificateAmount(basket).multiply(100).getValue();

			return total;
		};

		/**
		 * Create Sezzle payment instrument
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {dw.order.PaymentInstrument} payment instrument
		 */
		self.createPaymentInstrument = function (basket) {
			self.removePaymentInstrument(basket);
			var amount = sezzleUtils.calculateNonGiftCertificateAmount(basket);
			basket.createPaymentInstrument('Sezzle', amount);
			return basket;
		};

		/**
		 * Remove Sezzle payment instrument
		 *
		 * @param {dw.order.Basket}  basket
		 */
		self.removePaymentInstrument = function (basket) {
			var paymentInstruments = basket.getPaymentInstruments('Sezzle').iterator();

			while (!empty(paymentInstruments) && paymentInstruments.hasNext()) {
				let paymentInstrument = paymentInstruments.next();
				basket.removePaymentInstrument(paymentInstrument);
			}
		};
		
		/**
		 * Build object with checkout data and fetch the checkout url
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {string} checkout data object in JSON format
		 */
		self.initiateCheckout = function (basket) {
			var referenceID = sezzleUtils.generateUUID();
			var customerToken = self.getCustomerToken(basket.customer.profile);
			var returnObj = {};
			if (customerToken) {
				var createOrderLink = "";
				var requestObject = {
					'intent': 'AUTH',
					'reference_id': referenceID,
					'payment_amount': {
						'amount_in_cents': self.getTotal(basket),
						'currency': basket.getCurrencyCode()
					}
				}
				var apiResponse = sezzleAPI.getCustomerUUID(customerToken);
				if (!apiResponse.error) {
					requestObject.customer_uuid = apiResponse.response.customer.uuid;
					var customerLinks = apiResponse.response.customer.links;
					if (customerLinks) {
						var link = customerLinks[k];
						if (link.rel == 'order' && link.method == 'POST') {
							createOrderLink = link.href;	
						}
					}
					if (createOrderLink != "") {
						requestObject.link = createOrderLink;
						var orderResponse = sezzleOrder.createOrder(requestObject);
						if (!orderResponse.error && orderResponse.response.approved) {
							returnObj['tokenize'] = {
								'token' : customerToken
							}
						}
					}
				}
				returnObj['checkout'] = {
					'amount_in_cents': requestObject.amount_in_cents,
					'reference_id' : requestObject.reference_id,
					'order_uuid' : orderResponse.response.uuid,
					'order_links' : orderResponse.response.links
				}
			} else {
				var checkoutObject = {
					'cancel_url' : {
						'href' : self.getMerchant().user_cancel_url
					},
					'complete_url' : {
						'href' : self.getMerchant().user_confirmation_url + "?order_reference_id="+referenceID
					},
					'customer' : self.getCustomer(basket)
				};
				checkoutObject.order = self.getOrder(basket, referenceID);
				var checkoutResponse = sezzleAPI.initiateCheckout(checkoutObject);
				returnObj['checkout'] = {
					'amount_in_cents': self.getTotal(basket),
					'reference_id' : referenceID
				}
				if (checkoutResponse.response.order) {
					returnObj['checkout'].order_uuid = checkoutResponse.response.order.uuid;
					returnObj['checkout'].checkout_url = checkoutResponse.response.order.checkout_url;
					returnObj['checkout'].order_links = checkoutResponse.response.order.links;
				}
				if (checkoutResponse.response.tokenize) {
					returnObj['tokenize'] = {
						'token' : checkoutResponse.response.tokenize.token,
						'token_expiration' : checkoutResponse.response.tokenize.expiration,
						'approval_url' : checkoutResponse.response.tokenize.approval_url
					}
				}
			}
			return returnObj;
		};
		
		self.getCustomerToken = function (profile) {
			if (profile) {
				var token = profile.custom.SezzleToken;
				var tokenExpiration = profile.custom.SezzleTokenExpiration;
				var isTokenApproved = profile.custom.SezzleTokenApproved;
				if (token && tokenExpiration && isTokenApproved) {
					var currentTimestamp = Date.now();
					var tokenExpirationTimestamp = sezzleUtils.getFormattedDateTimestamp(tokenExpiration);
					if (isTokenApproved && currentTimestamp <= tokenExpirationTimestamp) {
						return token;	
					}
					self.deleteCustomerToken(profile); 
				}	
			}
			return '';
			//var tokenizeRecord = dw.object.CustomObjectMgr.getCustomObject('SezzleTokenize', customerNo);
			//if (tokenizeRecord) {
			//	var currentTimestamp = Date.now();
			//	var tokenExpirationTimestamp = sezzleUtils.getFormattedDateTimestamp(tokenizeRecord.custom.expiration);
			//	if (tokenizeRecord.custom.is_approved && currentTimestamp <= tokenExpirationTimestamp) {
			//		return tokenizeRecord.custom.token;	
			//	}
			//	self.deleteCustomerToken(tokenizeRecord); 
			//}
			
		};
		
		self.deleteCustomerToken = function (profile) {
			Transaction.wrap(function () {
				//dw.object.CustomObjectMgr.remove(record);
				profile.custom.SezzleToken = '';
				profile.custom.SezzleTokenApproved = '';
				profile.custom.SezzleTokenExpiration = '';
			});
		}
		
		
		/**
		 * Get customer 
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {string} customer data object in JSON format
		 */
		self.getCustomer = function (basket) {
			var customer = {
				"tokenize": sezzleData.getTokenizeStatus(),
				"email": basket.getCustomerEmail(),
				"first_name": basket.getCustomerNo() ? basket.getCustomer().getProfile().getFirstName() : basket.getBillingAddress().getFirstName(),
				"last_name": basket.getCustomerNo() ? basket.getCustomer().getProfile().getLastName() : basket.getBillingAddress().getLastName(),
				"phone": basket.getCustomerNo() ? basket.getCustomer().getProfile().getPhoneMobile() : basket.getBillingAddress().getPhone(),
				"dob": basket.getCustomerNo() ? basket.getCustomer().getProfile().getBirthday() : '',
				'billing_address' : self.getBillingAddress(basket),
				'shipping_address': self.getShippingAddress(basket)
			};
			return customer;
				
		};
		
		
		/**
		 * Get order 
		 *
		 * @param {dw.order.Basket}  basket
		 * @returns {string} order data object in JSON format
		 */
		self.getOrder = function(basket, referenceID) {
			var order = {
				"intent": "AUTH",
				"reference_id": referenceID,
				"description": "Commerce cloud order",
				"requires_shipping_info": false,
				"items": self.getItems(basket),
				"discounts": self.getDiscounts(basket),
				"shipping_amount": {
					'amount_in_cents' : self.getShippingAmmout(basket),
					'currency': basket.getCurrencyCode()
				 },
				"tax_amount": {
					'amount_in_cents' : self.getTaxAmount(basket),
				    'currency': basket.getCurrencyCode()
				 },
				"order_amount": {
					'amount_in_cents' : self.getTotal(basket),
				    'currency': basket.getCurrencyCode()
				 }	
                 	
			};
			return order;
		};
	};

	module.exports = new Basket();
}());
